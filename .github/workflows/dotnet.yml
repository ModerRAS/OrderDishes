# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  version: 1
jobs:
  build:

    runs-on: ubuntu-latest-4-cores

    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Log in to Docker Hub
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
            7.0.x
            8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish
      run: dotnet publish ./OrderDishes/OrderDishes.csproj -c Release -o ./out --self-contained false
    - name: Build and push Docker image nightly
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: moderras/orderdishes:nightly-${{ steps.date.outputs.date }}
    - name: Build and push Docker image latest
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: moderras/orderdishes:latest
    - name: Deploy to Server
      uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
      with:
        # ssh remote host
        host: ${{ secrets.SERVER_IP }}
        # ssh remote port
        port: ${{ secrets.SERVER_PORT }}
        # ssh remote user
        user: ${{ secrets.SERVER_USER }}
        # ssh remote password
        pass: ${{ secrets.SERVER_PASSWORD }}
        # execute pre-commands before scp
        first_ssh: cd /home/orderdishes && docker compose pull && docker compose up -d
